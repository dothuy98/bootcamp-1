オブジェクト指向プログラミングとは

変数と関数をひとまとめにしたクラスを作るプログラミングの手法。
プログラミングを手順ではなくモノの作成と操作として考える。
変更に対して柔軟に対応できるという特徴をもつ。

(用語の意味)
オブジェクト :
設計図から作成した実物。設計図というルールの元、動作する。
例）車の設計図から作られた車、プラモデルの設計図からつくられたプラモデルという実物のこと。

クラス :
オブジェクトの設計書。
オブジェクトにどういう動きをしてもらいたいか、どういう情報を持ってほしいかなどの情報を定義する。
オブジェクトのプロパティ・メソッドが定義される場所。

プロパティ :
それぞれのオブジェクトが持っているデータのこと。
例）車のメーカー、車の色など

メソッド :
それぞれのオブジェクトがもっている処理のことで、オブジェクトが行う振る舞い・動きのこと。

インスタンス化 :
インスタンスは実例という意味。
クラス(設計図）からオブジェクト(車)を生み出すこと。

(原則)
カプセル化 :
外から見てもそのものが複雑にならない状態をつくること。
明確に動きがわかるようなクラス名をつけること。
できるだけほかのプログラムから干渉を受けないようにし、かつほかのプログラムに干渉しないようにする仕組み。

継承（インヘリテンス） :
再利用性を高め、同じコードを書かないようにする。
継承する際は、サブクラスはスーパークラス(親クラス)の1つか？を判別してから継承させる。
抽象＞具体化という順番を崩して継承してはいけない。
異なる場合はモジュールとして機能を共通化する。

ポリモーフィズム :
本質的で抽象的なコードを書き、様々なことができるようすること。
オブジェクトによってプログラムの動き・振る舞いをを多様に変えられるクラスを設計しようという考え。
したがって様々なオブジェクトに応じて同じ関数で別の動きができるようなプログラムを心掛ける。
