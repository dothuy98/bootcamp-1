cliについていままでの振り返り

・原則
KISSの法則 : できる限りシンプルに実装しろ！
DRYの法則 : コードの繰り返し、コピペをするな。
同じような機能のコードが複数ある場合は統合する。
特に機能を拡張する際に気を付ける。メソッド名の言葉をより抽象的にしてから統合するとシンプルになる場合がある。
YAGNI原則 : You aren't gonna need it 今の時点で必要のない機能は付けない。
まずは変更が容易にできるようなコア機能を開発する。

・いただいたアドバイスのまとめ
1クラス1責務(役割）
1クラス1ファイル
1メソッド1処理
依存をできるだけ減らし、一方通行にする。
インスタンス変数は特に具体的に命名する。
ロジックはinitializeメソッド内には記載しない。また、インスタンス変数の初期化はinitialize内で完結させる。
固定の変数で多くの場所で使用するもの定数を使用する。
基本的に変数は使用せず、メソッド間でデータの受け渡しや戻り値で対応する。
exitはクラス内で使用せず、raise、ガード節(return)で対応する。
ガード節でネストを減らすとシンプルになる。
if __FILE__ == $0でそのクラスを実行した場合の処理を記述することができ、
ほかのクラスから呼ばれたときには実行しない処理を記述できる。
コメントアウトしたコードはpushしない
xxx?というメソッドはbool値のみを返す。
配列は複数形で命名する。
メソッド名で振る舞いが連想できる命名を行う。
戻り値を連想させたい場合はrubyに元々あるメソッド名を使うと分かりやすい。
helpなどユーザーの目にする部分は相手目線、ユーザー目線に常に立って言葉を使う。
開発者目線で記述しない。
少なくとも命名と内容が合っている場合は基本的にクラス名とオブジェクト名は同一で問題なし。
APIのkeyなどセキュリティで保護すべき内容は環境変数を用いる。
三項演算子や||=などワンライナーで記述できるテクニックを使用しシンプルに記述する。


・オブジェクト指向の命名について
クラスとはオブジェクト、概念
インスタンス変数はクラスの属性、性質、状態
メソッドはクラスの振る舞い
クラス名 + メソッド名 の順番で意味が分かりやすいかどうかを意識する。

・クラス設計の注意点
物事を正しく認識する。
概念を正しく理解しないとうまくクラスを定義できず曖昧な設計になってしまう。
したがって概念を決定する命名は最も慎重に大事に行う必要がある。
コードは書く時間より読むほうが多くの時間を使うためわかりやすい命名を意識する。
また、役割、責任がわかりやすい命名を行わないと、処理を追うのに行ったり来たりしなくてはならなくなる。
機能の追加の際も、命名がしっかりしていれば正しく追加を行うことができる。
保守運用の難易度を決定する命名は今後、常に注意を払う。

・設計の上達方法
物事を適切に把握する。物事を表す具体的な名前とそれを包括する抽象的な名前を意識する。
似ている物事が2つある場合、それを包括する抽象的な名前を考える。
やりたい処理を実現するコードを0から考え直し、コードから命名する。
紙に設計を書いて、繰り返しを減らす、わかりやすくするという観点で順番を入れ替える。

・クラス設計の基本
最も重要な命名を意識し、適切な命名を行う。
コードにおいてまとめられるところをまとめる（共通化や抽象化）
責務が2つ以上になっている場合などはクラス、モジュールに分けていく。

・モジュールの注意点
機能追加を意味するxxxableはクラスなどにincludeするときのみにつける。

・自分の気を付ける点
>複雑に考えすぎてしまう。
機能をコードに頭のなかで変換するときに最初に浮かんだコードで記述したまま、
それに合わせる形でさらにコードを記述するため複雑になってしまう。
まだまだ設計が不慣れな状態なので一度実現したい機能を紙に起こし、それを実現するためのプロセスを
考えてから記述する。また、動くコードができたら共通化、抽象化を行いリファクタリングを行う。

>焦るとミスをしてしまう。
そもそもあまり気負いすぎない。
視野が狭くなり考えが単調になってしまう。
どうしても気持ちに余裕がないときは散歩にでかける。

>同時に別のことができない。
作業を切り分け、順番をいれかえて、頭の使い方がたくさん切り替わる作業をしない。
1日の最初に今日やることを紙に起こして、あとから順番を振るとうまくいく。
また、説明会や面接などとても気を使うようなことをした後は休憩を挟まないとミスの修正で時間が余計にかかる。

>1つの考えに縛られていることがある
行き詰っているときにおこる。
自分の頭の中の考えを全て紙に書き起こし、頭をリセットする。
時間に余裕があれば散歩など気分転換を挟む。

・いただいた参考URL
https://www.find-job.net/startup/english-for-engineers-naming-conventions
https://qiita.com/pale2f/items/7212de664e24e3bc8e58





