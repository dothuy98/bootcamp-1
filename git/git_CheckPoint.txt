README.mdを編集し、push :
viなどのテキストエディタでREADME.mdを編集。
その後、
git add README.md
git commit -m "edit README.md"
git push origin edit_README
の順でpushを行った。
（README.mdについて）
レポジトリをインストールし使用する前に読むべきもの。
このレポジトリは何なのか。どんなことができるのかという疑問に答えるもの。
という役割を担っている。
基本は英語で、、簡潔に記述し、読む人の立場に寄り添って書くのがポイント。


logディレクトリの記述について : 
もし内定をいただけた場合の研修でも引き続き、このレポジトリを使用するため202010という今年の10月分に相当するディレクトリを作成し、自分にとっても、コードレビューをしてくださる方々にとっても見やすい構成を心掛けた。
また、ブランチについては常に同じmake_logで記述していき、push後のプルリクエストはgithubから行おうと考えた。
ディレクトリごとにつきごとに分けているため問題ないと判断した。


プルリクエストについて :
コードの変更をレビュワーに知らせ、マージを依頼するための機能。
これによってコードの変更点のみをチェックし、不具合がないかどうかの検証からマージをスムーズに行うことができる。
自分1人では気づかないミスの発見や、指摘を受けることによるコードの品質の向上を計ることができる。
また、ソースコードに関する変更のコミュニュケーションが形として残るため後からアドバイスを参照するなどが簡単に行える。

もし、修正内容があった場合は同じブランチで再度コミット、pushを行う。
その場合は、githubで自動でプルリクエストのボタンが表示されないため、githubのサイト上のPull requestsタブをクリックし、New pull requestボタンをクリック後、該当のブランチを指定し、プルリクエストを行う。


github flowについて : 
git flowに比べシンプルなのが特徴。

ルール1 : masterブランチは常にデプロイが可能な状態であること。
ルール2 : 作業用ブランチはmasterから作成する。
ルール3 : 作成した作業用ブランチは適宜、pushする。
ルール4 : プルリクエストを活用し、コードレビューを受ける。
ルール5 : プルリクエストが承認されたらmasterへマージする。
ルール6 : masterへのマージが完了したら直ちにデプロイを行う。

（注意点）
作業用ブランチは何の作業を行っているかわかる名前にする。
不要になったブランチは削除する。
masterブランチには誤った修正が入らないように心がける。


プルリクエストの修正対象が想定通り化の確認方法 :
github上のプルリクエストの一覧画面で確認したいPRをクリック。
メニュータブのうち、一番右に存在するFiles changedをクリックすると今回の修正内容のみが参照できる。


