git commandについて

git log :
いままでのコミット履歴を確認できるコマンド。
コミットしたときのメッセージを見ることができる。
gitは複数人で開発することを考えているため、必要に応じて前のverに戻す、比較するなどを行う際に使用すると考える。
ハッシュ値、作成者、日付、コメントの順で閲覧でき、ハッシュ値はコミットの際に自動で生成される４０バイトの値のことでこのハッシュ値からそれぞれのコミットを紐づけて管理していると考える。したがってあるコミットを見つけたときはこのハッシュ値をどこかで検索すれば該当のコミット見つけられると考える。
（オプション）
git log -10 : -10をつければ、最新のログを１０件分だけ取得できる
git log --oneline : コミットログを一行で表示する、ハッシュ値とコメントのみになる。
git log --stat : 通常の表示に加え、どのファイルが何か所変更されたかわかる。
git log ファイル名 : 指定のファイルが変更されたコミットのみを表示
git log ブランチ名 : 特定のブランチのコミットのみを表示

git status :
現時点での自分が行った変更を確認できるコマンド。
表示されるものとしては、git addされているけれどまだコミットされていないファイル名、変更が加えれられたがまだgit addされていないファイル名、git管理されておらず、.gitignoreで除外されていないファイル名がある。
このコマンドにより自分が行った処理がどの段階にあるか確認でき、やり忘れたことがないかの確認を行うことができ、適宜行うことでミスを減らすことができると考える。
（オプション）
git status -s(--short) : 短縮して表示する。
＞見方　M_ : git add されコミットされていないファイル
　　　　_M : 変更されたがgit addされていないファイル
　　　　?? : untrackedファイル。まだgitに管理されていないファイル

git add :
ワークツリー（作業ディレクトリ）で編集したファイルをコミットする前の状態のファイルがあつまる領域（ステージングエリア、インデックス）という場所に追加するコマンド。
git addせず直接commitしない理由としては、ステージングエリアという領域に追加したファイルの変更を本当には反映していいのか、もしくはこれらのファイルだけで十分なのかを確認するためにとりあえずひとまとめにしてコミットしたいファイルをまとめる、というために行うらしい。その際はgit diffで確認。
（オプション）
git add . : カレントディレクトリの全ファイルをインデックスに追加
git add -n . : git add .　でどのファイルが対象になるかの確認。(.gitignoreがうまく働くかの確認？）
git add -u : gitで管理しているすべてのファイルをインデックスに追加。
git add -p : ファイルごとではなく変更箇所、変更内容を確認しながらインデックスに追加できる。アルファベットで命令する。
　　　　　＞　y : 追加, n : 追加しない, q : 処理の中断

git diff : 
作業ツリーに行われた変更を表示さするコマンド。
デフォルトではインデックスを比較もとにしており、引数で比較元を指定できる。
したがって、まだgit addしていない場合はgit diffで比較できる。
（オプション）
git diff HEAD : 最新のコミットとの差分を得る
git diff --cached : 自分がaddした内容の確認
git fetch origin master(main) > git diff master(main) origin/master(main) : リモートブランチとローカルブランチの比較。
git diff HEAD^ : 自分のコミットの内容の確認（^で１つ前のという意味）
git diff ブランチA..ブランチB : ブランチ同士の比較（２つの引数を指定するときは..でつなぐ）

git push : 
ローカルレポジトリで開発したものをリモートレポジトリに反映させるためのコマンド。
デフォルトでは上流ブランチとして設定されているリモートのブランチに送信される。
したがって、指定する場合はgit push リモート名　ブランチ名で引数を指定する。
また、上流ブランチ名はgit branch -vvで確認でき、リモートの場所はgit remote -vで確認できる。
git pushをmaster(main)以外のブランチ名で行うとgithubからプルリクエストを行うことができ、自分以外のだれかに自分が変更できるだけの作業を行ったことや、コードビューのリクエストを行える。
（オプション）
git push -n : 実行内容の確認のみを行い、実行はしない。

git clone : 
レポジトリを複製し、ローカル環境を構築するためのコマンド。
プロジェクトに途中から参加する際や、github上の既存のツールをインストールする場合などに使う。
git clone レポジトリのURLのように引数を指定する。また、URLの次の引数を指定することでディレクトリ名を自分で設定できる。
非公開のレポジトリの場合にはパスワード、ユーザー名が必要となる。
レポジトリ内の.gitというディレクトリでバージョン管理の履歴が保存されている。
また、時間がたち、誰かのコミットによって最新バージョンでなくなった場合に最初からgit cloneするより後述のgit pullを使用する方が効率的。

git pull : 
自分以外の人がリモートレポジトリにpushした変更を自分のローカル環境に反映させるコマンド。
レポジトリがどのように変更されているかを読み取り(git fetch)、現在のブランチに取り込む処理をしている。(git merge)
よってgit pullはgit fetch > git mergeを行うコマンド。
もしもコンフリクトという変更内容が重複するという問題が起きた場合は、
git merge --abortでmergeを取り消し、git reset --hard HEADで直前のコミットまで戻すことができる。
（オプション）
git pull -v : 詳しいメッセージを表示する。
