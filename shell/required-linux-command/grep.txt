grep :
global regular expression printの略。
ファイルの中身を検索する。
grep 検索正規表現 ファイル名で検索できる。
ディレクトリに含まれるすべてのファイルを対象にすることもでき、`grep a dit/*`などのようにワイルドカードを使用して検索できる。

（and検索）
grep <string> <file_name> | grep <string> <file_name>のようにパイプでつなげばand検索が可能。
もしくは正規表現で `grep a.*bのようにand検索を実現できる。

（or検索）
grep -e <string1> -e <string2> <file_name>でor検索を行うことができる。

(オプション）
-w : 単語での一致のみ検索する。
-c : 一致するものが含まれている回数を表示する。
> 注意点として1行に1つしかインクリメントしないため、1行に2つ一致するものがあってもカウントは1つしか増えない。
-i : 大文字小文字を区別せずに検索を行う。
-E : 拡張正規表現を使用する。
> 拡張正規表現 : 基本正規表現と異なり、()、{}、|を使用するときに\(\)のようにエスケープして書く必要がなくなる。
-P : Perl正規表現を使えるようにする。Perl言語の正規表現と同じように使用できる。
> Perl正規表現 : \d,\D,\w,\Wなどの便利なメタ文字が使用可能になる。ほかにも最長一致、最短一致などが使えるようになる。
-e : or検索でgrepを使用したいときに使える。
-v : 一致しないものを検索する。not条件のように使える。
-n : 検索結果に行番号を追加して出力させる。
-l : 検索結果にファイル名のみを出力させる。|でつなぎ別の処理をさせたいときなどに便利。
-h : 検索結果にファイル名を表示させない。
-o : 一致した文字を含む行ではなく一致した文字のみを出力する。
-B <数字>: <数字>分、検索にヒットした行から前の行も出力する。
-A <数字>: <数字>分、検索にヒットした行から後の行も出力する。
-C <数字> : <数字>分、検索にヒットした行の前後の行も取得する。
-r : ディレクトリを<file_name>に指定した場合、そのディレクトリの中のディレクトリのファイルも再帰的に検索してくれる。
-R : -rの機能に追加してシンボリックリンクのリンク先も検索する。
-L : 検索に当てはまらないファイル名を記述する。
-q : 結果を出力しない。シェルスクリプトで終了ステータスを参照したいときに使う。
-s : エラーメッセージを表示しない。

(使えそうなとき）
・ログファイルの内、ERRORという文字が含まれる行のみを出力し、問題がないかチェックする。
> grep "ERROR" log.txt

・シェルスクリプトである文字列に一致する行があるかどうかで条件分岐させたいとき。
> if grep -q ".txt" $file_name; then

・区切り文字が改行の出力結果に対して、".sh"などの特定の文字列の出力回数を表示する。
> ls | grep ".sh" -c
  lsはディスプレイ出力以外の場合、1行ごとに出力するため、-1がない。

・()で囲まれたテキストのみを抽出し()を削除する加工する。
> aaa(fff)bbb
  (ddd)
  (ggg)ffff
  fdsf(ff)
  など()で囲まれた文字列という内容のファイル名をtest.txtとすると
  grep -oP "(?<=\().+(?=\))" test.txt
  Perl正規表現の先読み・後読みで実現できる。
  Perl正規表現で記述できる先読み・後読みは^や$のような位置を決定することができる。
  先読み : "a(?=b)"で直後にbがあるaに一致する。
  後読み : "(?<=a)b"では直前にaがあるbに一致する。
