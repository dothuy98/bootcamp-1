& :
コマンドの最後に&をつけるとバックグラウンドでプログラムを実行できる。
バックグラウンドで実行すると、すぐにターミナルが次のコマンドを受け付ける状態になり、かつ処理も行うことができる。

nohup command &として実行することが多い。
nohupをつけて実行すると、SIGHUPを無視した状態でプロセスを実行する。
したがってkill -SIGHUPなども無視される。
SIGHUPシグナルはshellでexitした時に送信されるシグナルで、プロセスがこのシグナルを受け取ると実行中のコマンドを終了する。
シグナルはプロセスとプロセスの間での通信を行う際に使用される信号。

（disownとnohup違い）
disownは処置途中のプロセスを停止させて途中からバックグラウンドで実行したいときに使われる。
nohupがSIGHUPを無視するのに対して、disownはjobテーブルからそのプロセスを削除することで制御端末が切断されるときに送信されるSIGHUPを受け取らないため起動し続ける。
したがってdisownしたプロセスはnohupと異なりjobsで参照できない。

バックグラウンドで実行されているコマンドは`jobs`というコマンドで確認できる。
バックグラウンドでのプロセスが終了してからEnterを押さないと終了通知が出力されない。
しかしset -bでシェルのオプションを変更すると、終了した瞬間に通知してくれる。

(停止）
バックグラウンドで実行しているコマンドを停止させる場合は、
jobs表示されるジョブ番号を参照したのちに、`stop %<ジョブ番号>`で停止することができる。

フォアグラウンドで動いているプロセスはctrl + Zで停止できる。

(削除）
同様にjobsでジョブ番号を参照したのにちに、`kill %<ジョブ番号>`で削除することができる。
他のシェルから削除する場合は
> ps -a | grep <command_name>でPIDを参照したのちに、`kill <PID>`で削除できる。
  ps -a | grep <command_name は pgrep <command_name>で同様にPIDを参照できる

(フォアグラウンドに戻す)
fg %<ジョブ番号>で戻る。

（フォアグラウンドのプロセスをバックグラウンドで実行させる）
ctrl + Zでプロセスを停止させる。
bg %<ジョブ番号>

(いつ使えそうか）
・処理時間が長いプロセスを実行するとき
nohup <command> &

・ログをtail -f で監視しているときに時間経過ごとに改行をいれてどこまで進んだかわかりやすくする。
> while true; do echo; sleep 10; done & 
